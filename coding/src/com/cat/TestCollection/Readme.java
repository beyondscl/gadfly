package com.cat.TestCollection;

/**
 * Created by Administrator on 2017/10/26 0026.
 *
 * @doc 集合类
 * =====================================================================================================================
 * collections接口
 * +list
 * --linkedList 双向链表
 * --arrayLisst 数组实现，单向链表
 * --vector 数组实现，同步,一般不用；用Collections配合使用获得同步的数据
 * --Stack 数组实现，同步，add()-> boolen和push() ->Object ;peek() ->获得不删除和pop()获得并删除
 * +map 建不重复；优化，key简洁，大小最好固定扩容麻烦
 * --hashMap   建可为空，多线程ConcurrentHashMap安全
 * --hashTable 建不可为空，同步安全，
 * --IdentifyHashMap 建不可为空，同步安全，
 * --linkeddHashMap
 * --WeakHashMap
 * +quene [在高并发中有大量讲解]
 * +set key不重复，去重那么重写hashcode和equals
 * --hashSet
 * --treeSet
 * =====================================================================================================================
 * 基本概念解释：
 * 数组:数组连续内存空间，查找速度快，增删慢
 * 链表:链表充分利用了内存，存储空间是不连续的，首尾存储上下一个节点的信息，所以寻址麻烦，查找速度慢，但是增删
 * hash表：综合了它们两个的有点，一个哈希表，由数组和链表组成。
 * 假设一条链表有1000个节点，现在查找最后一个节点，就得从第一个遍历到最后一个；如果用哈希表，将这条链表分为10组，
 * 用一个容量为10数组来存储这10组链表的头结点（a[0] = 0 , a[1] = 100 , a[2] = 200 …）。这样寻址就快了
 * Hash碰撞，不同的key根据hash算法算出的值可能一样，如果一样就是所谓的碰撞。
 * 【线程不安全的类都可以配合Collections得到线程安全的类】
 * =====================================================================================================================
 * 基本用法
 */
public class Readme {
    public static void main(String[] args) {
    }
}
